import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use("seaborn")
sns.set(font_scale = 1)
sns.set_style("whitegrid")

import plotly.express as px

import chart_studio.plotly as py
import cufflinks as cf
cf.go_offline(connected=True)

import plotly.graph_objects as go
import plotly.offline as pyo
pyo.init_notebook_mode()

from plotly.subplots import make_subplots

import missingno as msno

import warnings
warnings.filterwarnings(action='ignore')

plt.rcParams['font.family']='S-Core Dream'
plt.rcParams['axes.unicode_minus'] = False

bike1 = pd.read_csv('/Users/yeondu/Documents/project_datacampus/data1_place_info.csv',skiprows=[0,1,2,3],encoding = 'cp949')
bike1.columns = ['대여소번호','대여소명','자치구','상세주소','위도','경도','설치시기','설치형태','거치 대수','운영방식']
bike2 = pd.read_csv('/Users/yeondu/Documents/project_datacampus/data2_usage_info(months).csv',header=5,encoding = 'cp949')
bike3 = pd.read_csv('/Users/yeondu/Documents/project_datacampus/data3_usage_info(hours).csv',encoding = 'cp949')

#print(bike1.shape)
#print(bike2.shape)
#print(bike3.shape)

#bike1.info()
#bike2.info()
#bike3.info()

#bike1.describe()
#bike2.describe()
#bike3.describe()


#bike1.describe(include=np.object_)
#bike2.describe(include=np.object_)
#bike3.describe(include=np.object_)

#bike1.isnull().sum()
#msno.bar(bike1)  #한글깨짐ㅠㅠ
#bike2.isnull().sum()
#bike3.isnull().sum()
#msno.bar(bike3)  #한글깨짐 흑흑흑...


bike1 = bike1.drop(["상세주소","위도","경도"], axis=1)
dp = bike1[bike1["설치시기"].isnull()]
bike1 = bike1.drop(dp.index)
bike1 = bike1.fillna(0)
#bike1.isnull().sum()

#bike3["성별"].unique()
bike3[bike3["성별"] == 'f'] = "F"
bike3[bike3["성별"] == 'm'] = "M"
#bike3["성별"].unique()

bike2["대여소번호"] = bike2["대여소 명"].str.split(".",expand=True)[0]
bike2["대여소 이름"] = bike2["대여소 명"].str.split(".",expand=True)[1]
#print(bike2.isnull().sum())
#bike2.head()

bike3["대여소 이름"] = bike3["대여소명"].str.split(".",expand=True)[1]
#bike3.isnull().sum()
bike3 = bike3.dropna(subset = ["대여소 이름"])
#print(bike3.isnull().sum())
#bike3.head()

bike1["대여소번호"] = bike1["대여소번호"].astype("object")
#bike1.info()

bike3["이용건수"] = pd.to_numeric(bike3["이용건수"])
bike3["이동거리(M)"] = pd.to_numeric(bike3["이동거리(M)"])
bike3["이용시간(분)"] = pd.to_numeric(bike3["이용시간(분)"])


bike3["운동량"][bike3["운동량"]== r"\N"] = -1
bike3["탄소량"][bike3["탄소량"]== r"\N"] = -1
bike3["운동량"] = pd.to_numeric(bike3["운동량"])
bike3["탄소량"] = pd.to_numeric(bike3["탄소량"])

#bike3.info()
#bike3.head()


bike1["설치시기"] = pd.to_datetime(bike1["설치시기"])
bike3["대여일자"] = pd.to_datetime(bike3["대여일자"])
#bike1.info()



### 평균 이동거리가 큰 순서대로 대여소명을 확인
Longest_Journey = bike3.groupby("대여소 이름")["이동거리(M)"].mean().reset_index().sort_values(by="이동거리(M)",ascending=False)
#Longest_Journey.head()

### 평균 이동거리가 큰 20개 대여소 시각화
Longest_Journey_20 = Longest_Journey.head(20).sort_values(by="이동거리(M)",ascending=True)
fig = px.bar(Longest_Journey_20, y="대여소 이름", x='이동거리(M)',orientation = 'h', color='이동거리(M)')
fig.update_layout(
    title=dict(
        text="<b>평균 이동거리가 큰 대여소 top 20</b>", 
        font_size= 20
    ),
yaxis = dict(
title="대여소명")
)

#fig.show()



### 평균 이용시간이 많은 순서대로 대여소명 확인
Longest_Time = bike3.groupby("대여소 이름")["이용시간(분)"].mean().reset_index().sort_values(by="이용시간(분)",ascending=False)
#Longest_Time.head()

### 평균 이용시간이 많은 대여소 top 20 시각화
Longest_Time_20 = Longest_Time.head(20).sort_values(by="이용시간(분)",ascending=True)

fig = px.bar(Longest_Time_20, x="이용시간(분)", y="대여소 이름", orientation = 'h', color= '이용시간(분)')
fig.update_layout(
title = dict(
text="<b>평균 이용시간이 많은 대여소 top 20</b>",
font_size=20
),
yaxis = dict(
title="대여소명"
),
template="plotly_white"
)

#fig.show()




#### 운동량과 이동거리의 상관관계 시각화
#f, ax = plt.subplots(1, 1, figsize = (18,8))
#sns.scatterplot(data=bike3, x = "이동거리(M)", y= "운동량")

#ax.set_xlim(-10000,150000)
#ax.set_ylim(-1000,10000)
#ax.set_title("운동량과 이동거리 상관관계", size = 20)

#plt.show()



#### 성별/연령대별 이동거리와 운동량의 상관관계 시각화
#import time
#start=time.time()

#f, ax = plt.subplots(1,2,figsize=(18,8))
#sns.scatterplot(data=bike3, x="이동거리(M)", y= "운동량", hue = '성별', ax = ax[0])
#ax[0].set_xlim(-10000,150000)
#ax[0].set_ylim(-1000,10000)
#ax[0].set_title("운동량과 이동거리의 상관관계(성별)", size = 20)

#sns.scatterplot(data=bike3, x= "이동거리(M)", y= "운동량", hue = '연령대코드', ax = ax[1])
#ax[1].set_xlim(-10000,150000)
#ax[1].set_ylim(-1000,10000)
#ax[1].set_title("운동량과 이동거리 상관관계(연령대)", size = 20)

#plt.show()

#end = time.time()
#print("runtime:", end-start)






#### 따릉이를 가장 많이 이용하는 성별 시각화
#Bike_Sex = bike3["성별"].value_counts().reset_index()
#Bike_Sex.columns = ["성별", '이용건수']

#fig = px.bar(Bike_Sex , x = '성별', y = '이용건수', color = '성별')

#fig.update_layout(
#title = dict(
#text = "<b>성별에 따른 이용 건수</b>",
#font_size = 20
#),
    #showlegend=False
#)

#fig.show()




bike3["대여일자_연"] = bike3['대여일자'].dt.year
bike3["대여일자_월"] = bike3['대여일자'].dt.month
bike3["대여일자_일"] = bike3['대여일자'].dt.day
#bike3.head()

#대여일별,셩별 사용시간 총계
Hour = pd.pivot_table(data=bike3, index="대여일자_일",columns='성별',values='이용시간(분)',aggfunc='sum')
#Hour.head()

#대여일별, 성별 사용시간 시각화

#layout=dict(
#    title=dict(
#        text="<b>일별 / 성별에 따른 따릉이 사용시간</b>",
#        font_size=20
#    ),
#    xaxis = dict(
#        title="대여일",
#        dtick=1
#    ),
#    yaxis = dict(
#        title='이용시간(분)'
#    ),
#    template='plotly_white'
#)

#Hour.iplot(kind='line',layout=layout)




#### 따릉이를 가장 많이 이용하는 연령대는?
#bike3['연령대코드'].value_counts()
#### 시각화
#Bike_Age = bike3['연령대코드'].value_counts().reset_index()
#Bike_Age.columns = ['연령대','이용건수']

#fig = px.bar(Bike_Age, x='연령대', y='이용건수',color='연령대')
#fig.update_layout(
#title=dict(
#text="<b>연령대에 따른 따릉이 이용건수</b>",
#font_size=20
#),
#showlegend=False
#)

#fig.show()


#### 연령대별 사용시간 on 일
Hour_Age = pd.pivot_table(data=bike3, index='대여일자_일',columns='연령대코드',values='이용시간(분)',aggfunc='sum')
#Hour_Age.head()
#### 시각화
#layout=dict(
#title=dict(
#text='<b>연령대에 따른 따릉이 사용시간 일별</b>',
#font_size=20
#),
#xaxis = dict(
#title='대여일',
#dtick = 1
#),
#yaxis=dict(
#title='이용시간(분)'
#),
#)

#Hour_Age.iplot(kind='line',layout=layout)



#### 자치구별 거치대수 확인
Bike_Location = bike1.groupby("자치구")["거치 대수"].sum().reset_index()
Bike_Location = Bike_Location.set_index("자치구")

Bike_Location.sort_values(by='거치 대수', ascending=False).head()

#### folium 으로 서울 지도위에 거치대 수 분포 확인
import json
import folium

geo_path = "/Users/yeondu/Downloads/02. skorea_municipalities_geo_simple.json"
geo_str = json.load(open(geo_path,encoding='utf-8'))

Map = folium.Map(location=[37.5502,126.982],zoom_start=11,tiles="Stamen Toner")

Map.choropleth(
geo_data=geo_str,
data=Bike_Location['거치 대수'],
columns=['자치구','거치 대수'],
fill_color="YlGnBu",
key_on="feature.properties.name",
legend_name="자치구별 따릉이 거치대 수"
)

Map

